name: CD

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:

jobs:
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service: [webhook, bot, api]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect changed paths
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            webhook:
              - 'webhook/**'
            bot:
              - 'bot/**'
              - 'db_core/**'
            api:
              - 'api/**'
              - 'db_core/**'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push webhook
        if: matrix.service == 'webhook' && steps.changes.outputs.webhook == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ./webhook
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:webhook-latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:webhook-${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:webhook-cache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:webhook-cache,mode=max

      - name: Build and push bot
        if: matrix.service == 'bot' && steps.changes.outputs.bot == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./bot/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:bot-latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:bot-${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:bot-cache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:bot-cache,mode=max

      - name: Build and push api
        if: matrix.service == 'api' && steps.changes.outputs.api == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./api/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:api-latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:api-${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:api-cache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:api-cache,mode=max


  deploy:
    name: Deploy to server
    runs-on: ubuntu-latest
    needs: build-and-push
    if: |
      needs.build-and-push.result == 'success'

    steps:
      - name: Deploy on remote server
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd ~/deploy
            docker compose pull
            docker compose up -d --remove-orphans
