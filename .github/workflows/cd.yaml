name: CD

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.set-output.outputs.services }}
      has_changes: ${{ steps.set-output.outputs.has_changes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect changed paths
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            webhook:
              - 'webhook/**'
            bot:
              - 'bot/**'
              - 'db_core/**'
            api:
              - 'api/**'
              - 'db_core/**'

      - name: Set outputs
        id: set-output
        run: |
          changed=()
          if [[ "${{ steps.filter.outputs.webhook }}" == "true" ]]; then changed+=("webhook"); fi
          if [[ "${{ steps.filter.outputs.bot }}" == "true" ]]; then changed+=("bot"); fi
          if [[ "${{ steps.filter.outputs.api }}" == "true" ]]; then changed+=("api"); fi

          if [ ${#changed[@]} -eq 0 ]; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "services=[]" >> $GITHUB_OUTPUT
          else
            json=$(printf '%s\n' "${changed[@]}" | jq -R . | jq -s .)
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "services<<EOF" >> $GITHUB_OUTPUT
            echo "${json}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    needs: detect-changes
    if: needs.detect-changes.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.services) }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:${{ matrix.service }}-latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:${{ matrix.service }}-${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:${{ matrix.service }}-cache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:${{ matrix.service }}-cache,mode=max

  deploy:
    name: Deploy to server
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-push]
    if: needs.detect-changes.outputs.has_changes == 'true' && needs.build-and-push.result == 'success'
    steps:
      - name: Deploy on remote server
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd ~/deploy
            docker compose pull
            docker compose up -d --remove-orphans
