name: CD

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed_services: ${{ steps.filter.outputs.changed_services }}
    steps:
      - uses: actions/checkout@v4

      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            webhook:
              - 'webhook/**'
              - 'rmq_core/**'
            bot:
              - 'bot/**'
              - 'db_core/**'
              - 'rmq_core/**'
            api:
              - 'api/**'
              - 'db_core/**'

      - name: Prepare changed services list
        id: prepare
        run: |
          services=()
          if [ "${{ steps.filter.outputs.webhook }}" == "true" ]; then services+=('"webhook"'); fi
          if [ "${{ steps.filter.outputs.bot }}" == "true" ]; then services+=('"bot"'); fi
          if [ "${{ steps.filter.outputs.api }}" == "true" ]; then services+=('"api"'); fi
          echo "changed_services={\"service\":[${services[*]}]}" >> $GITHUB_OUTPUT

  build-and-push:
    name: Build & Push Docker Images
    needs: detect-changes
    if: needs.detect-changes.outputs.changed_services != '{"service":[]}'
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.detect-changes.outputs.changed_services) }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:${{ matrix.service }}-latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:${{ matrix.service }}-${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:${{ matrix.service }}-cache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:${{ matrix.service }}-cache,mode=max

  deploy:
    name: Deploy to server
    runs-on: ubuntu-latest
    needs: build-and-push
    if: needs.build-and-push.result == 'success'
    steps:
      - name: Deploy on remote server
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd ~/deploy
            docker compose pull
            docker compose up -d --remove-orphans
