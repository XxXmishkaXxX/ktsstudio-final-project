import pytest
from unittest.mock import AsyncMock, MagicMock
from app.bot.handlers.commands.play import play_command
from db_core.models.users import State


@pytest.mark.asyncio
async def test_play_command_private_chat():
    app = MagicMock()
    app.telegram.send_message = AsyncMock()

    user = MagicMock()
    user.username = "player1"
    user.state = State.idle

    await play_command(app, chat_id=111, user=user, chat_type="private")

    app.telegram.send_message.assert_awaited_once_with(
        111,
        (
            "‚ùå –ö–æ–º–∞–Ω–¥–∞ /play —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.\n"
            "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç —Å –¥—Ä—É–∑—å—è–º–∏!"
        ),
    )


@pytest.mark.asyncio
async def test_play_command_starts_new_game():
    app = MagicMock()
    app.telegram.send_message = AsyncMock()
    app.store.games.is_active_game_in_chat = AsyncMock(return_value=None)
    app.logger = MagicMock()
    app.game_service.create_game = AsyncMock()

    user = MagicMock()
    user.username = "player1"
    user.state = State.idle
    user.id = 42

    await play_command(app, chat_id=222, user=user, chat_type="group")

    app.store.games.is_active_game_in_chat.assert_awaited_once_with(222)
    app.telegram.send_message.assert_any_await(
        222, "üéÆ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @player1 –∑–∞–ø—É—Å—Ç–∏–ª –∏–≥—Ä—É!"
    )
    app.game_service.create_game.assert_awaited_once_with(222, 42)


@pytest.mark.asyncio
async def test_play_command_game_already_running():
    app = MagicMock()
    app.telegram.send_message = AsyncMock()
    app.store.games.is_active_game_in_chat = AsyncMock(return_value={"id": 1})
    app.logger = MagicMock()
    app.game_service.create_game = AsyncMock()

    user = MagicMock()
    user.username = "player1"
    user.state = State.idle

    await play_command(app, chat_id=333, user=user, chat_type="group")

    app.telegram.send_message.assert_awaited_once_with(333, "–í —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç –∏–≥—Ä–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    app.game_service.create_game.assert_not_awaited()


@pytest.mark.asyncio
async def test_play_command_user_not_idle_but_no_game():
    app = MagicMock()
    app.telegram.send_message = AsyncMock()
    app.store.games.is_active_game_in_chat = AsyncMock(return_value=None)
    app.logger = MagicMock()
    app.game_service.create_game = AsyncMock()

    user = MagicMock()
    user.username = "player2"
    user.state = State.in_game # –Ω–µ idle

    await play_command(app, chat_id=444, user=user, chat_type="group")

    app.telegram.send_message.assert_awaited_once_with(444, "–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –¥—Ä—É–≥–æ–π –∏–≥—Ä–µ.")
    app.game_service.create_game.assert_not_awaited()
