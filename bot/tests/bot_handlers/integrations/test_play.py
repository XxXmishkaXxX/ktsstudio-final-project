import pytest
from db_core.models.games import Game, GameState
from db_core.models.teams import Team
from db_core.models.users import User, State
from unittest.mock import AsyncMock
from app.bot.handlers.commands.play import play_command



@pytest.mark.asyncio
async def test_play_command_creates_game_and_teams(application, store):
    chat_id = 1000
    tg_user_id = 42

    application.game_service.update_state = AsyncMock()
    # –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await store.users.create_or_get_user(
        {"id": tg_user_id, "username": "player1"}
    )
    user.state = State.idle

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä—ã –≤ —á–∞—Ç–µ –Ω–µ—Ç
    game_in_chat = await store.games.is_active_game_in_chat(chat_id)
    assert game_in_chat is None

    # –ú–æ–∫–∞–µ–º telegram
    application.telegram.send_message = AsyncMock()

    # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /play
    await play_command(application, chat_id=chat_id, user=user, chat_type="group")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–ª–∞—Å—å
    game = await application.store.games.is_active_game_in_chat(chat_id)
    assert game is not None
    assert game.state == GameState.created

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–∑–¥–∞–Ω—ã –¥–≤–µ –∫–æ–º–∞–Ω–¥—ã
    teams = await application.store.teams.get_game_teams(game.id)
    assert len(teams) == 2

    # –ú–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
    application.telegram.send_message.assert_any_await(
        chat_id, f"üéÆ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} –∑–∞–ø—É—Å—Ç–∏–ª –∏–≥—Ä—É!"
    )
